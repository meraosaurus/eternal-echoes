[gd_resource type="Resource" script_class="DialogueResource" load_steps=2 format=3]

[sub_resource type="GDScript" id="GDScript_ha5sj"]
script/source = "@tool
@icon(\"./assets/icon.svg\")

## A collection of dialogue lines for use with [code]DialogueManager[/code].
class_name DialogueResource extends Resource


const _DialogueManager = preload(\"./dialogue_manager.gd\")
const DialogueLine = preload(\"./dialogue_line.gd\")

## A list of state shortcuts
@export var using_states: PackedStringArray = []

## A map of titles and the lines they point to.
@export var titles: Dictionary = {}

## A list of character names.
@export var character_names: PackedStringArray = []

## The first title in the file.
@export var first_title: String = \"\"

## A map of the encoded lines of dialogue.
@export var lines: Dictionary = {}

## raw version of the text
@export var raw_text: String


## Get the next printable line of dialogue, starting from a referenced line ([code]title[/code] can
## be a title string or a stringified line number). Runs any mutations along the way and then returns
## the first dialogue line encountered.
func get_next_dialogue_line(title: String, extra_game_states: Array = [], mutation_behaviour: _DialogueManager.MutationBehaviour = _DialogueManager.MutationBehaviour.Wait) -> DialogueLine:
	return await Engine.get_singleton(\"DialogueManager\").get_next_dialogue_line(self, title, extra_game_states, mutation_behaviour)


## Get the list of any titles found in the file.
func get_titles() -> PackedStringArray:
	return titles.keys()


func _to_string() -> String:
	return \"<DialogueResource titles=\\\"%s\\\">\" % [\",\".join(titles.keys())]
"

[resource]
script = SubResource("GDScript_ha5sj")
using_states = PackedStringArray()
titles = {
"start": "2"
}
character_names = PackedStringArray("Vanessa")
first_title = "2"
lines = {
"1": {
"id": "1",
"next_id": "2",
"text": "start",
"type": &"title"
},
"2": {
"character": "Vanessa",
"character_replacements": Array[Dictionary]([]),
"id": "2",
"next_id": "3",
"notes": "",
"tags": PackedStringArray(),
"text": "this is some dialogue.",
"text_replacements": Array[Dictionary]([]),
"translation_key": "this is some dialogue.",
"type": &"dialogue"
},
"3": {
"id": "3",
"is_snippet": false,
"next_id": "end",
"type": &"goto"
}
}
raw_text = "~ start
Vanessa: this is some dialogue.
=> END"
metadata/dialogue_manager_version = "2.44.1"
